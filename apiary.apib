FORMAT: 1A

HOST: https://api.fragnet.net

# FragNET API

FragNET is a simplistic Restful API that controls the deployment and management of hosted Gaming & VOIP services.

# Group Game Servers

## Create Server [/game/createServer]

### createServer [POST]

Create a new Game Server instance. It takes a JSON encoded object
containing required parameters that specify service settings and
the regional location for deployment.

@Steam_Key (string) - Required for Steam based games to generate unique GSLT.
This can be obtained at https://steamcommunity.com/dev/apikey

@Game (string) - Shortcode for game type to create

    - bfbc2: Battlefield Bad Company 2
    - bf3: Battlefield 3
    - bf4: Battlefield 4
    - bfh: Battlefield Hardline
    - cs: Counter-Strike 1.6
    - css: Counter-Strike Source
    - csgo: Counter-Strike Global Offensive
    - dayz: DayZ Standalone
    - kf: Killing Floor
    - kf2: Killing Floor 2
    - l4d: Left 4 Dead
    - l4d2: Left 4 Dead 2
    - tf2: Team Fortress 2
    
@Slots (string) - Integer value expressed as string for maximum player slots

@Location (string) - Shortcode for regional location of deployment

    - as-hk: Hong Kong, CH
    - as-tk: Instanbul, TK
    - as-sg: Singapore, SG
    - as-jp: Tokyo, JP
    
    - au-br: Brisbane, AU
    - au-ml: Melbourne, AU
    - au-pr: Perth, AU
    - au-sy: Sydney, AU

    - eu-nl: Amsterdam, NL
    - eu-de: Frankfurt, DE
    - eu-fi: Espoo, FI
    - eu-fr: Paris, FR
    - eu-it: Milan, IT
    - eu-uk: London, UK
    - eu-no: Oslo, NO
    - eu-ru: Moscow, RU
    - eu-se: Stockholm, SE
    
    - sa-br: Sao Paolo, BR

    - us-atl: Atlanta, GA
    - us-ash: Ashburn, VA
    - us-buf: Buffalo, NY
    - us-chi: Chicago, IL
    - us-dal: Dallas, TX
    - us-lax: Los Angeles, CA
    - us-nyc: New York, NY
    - us-sea: Seattle, WA
    - us-sjc: San Jose, CA

@Private (string) - Boolean value expressed as string for Public/Private server

@Private_Password (string) - Optional password value for private servers

@RCON_Password (string) - Optional administrative password value for remote management

+ Request (application/json)
    
    + Body

            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "steam_key": "STEAM_KEY",
                "game": "csgo",
                "slots": "24",
                "location": "us-dal",
                "private": "0",
                "private_password": "",
                "rcon_password": "2Y5K5LLH9zxV2MKZ"
            }

+ Response 200 (application/json)

    + Headers

            Location: /game/createServer

    + Body

            {
                "status": "success",
                "server": {
                    "steam_token": "8960169E880BA0145E16F3C4C312BFB6",
                    "game": "csgo",
                    "slots": "24",
                    "location": "us-dal",
                    "address": "127.0.0.1:27015",
                    "private": "False",
                    "private_password": "",
                    "rcon": "admin_password",
                    "ftp": {
                        "endpoint": "127.0.0.1:21",
                        "user": "ftp_username",
                        "password": "ftp_password",
                        "path": "/127.0.0.1_27015"
                    }
                }
            }
            
## Get Servers [/game/getServers]

### getServers [POST]

Request a full list of gaming services from a specific user account.
It takes an optional JSON encoded object containing various filters
to limit the results of the query.

@Game (string) - Shortcode for game type

    - bfbc2: Battlefield Bad Company 2
    - bf3: Battlefield 3
    - bf4: Battlefield 4
    - bfh: Battlefield Hardline
    - cs: Counter-Strike 1.6
    - css: Counter-Strike Source
    - csgo: Counter-Strike Global Offensive
    - dayz: DayZ Standalone
    - kf: Killing Floor
    - kf2: Killing Floor 2
    - l4d: Left 4 Dead
    - l4d2: Left 4 Dead 2
    - tf2: Team Fortress 2
    
@Status (string) - Boolean value expressed as string for Enabled/Disabled status

@Location (string) - Shortcode for regional location

    - as-hk: Hong Kong, CH
    - as-tk: Instanbul, TK
    - as-sg: Singapore, SG
    - as-jp: Tokyo, JP
    
    - au-br: Brisbane, AU
    - au-ml: Melbourne, AU
    - au-pr: Perth, AU
    - au-sy: Sydney, AU

    - eu-nl: Amsterdam, NL
    - eu-de: Frankfurt, DE
    - eu-fi: Espoo, FI
    - eu-fr: Paris, FR
    - eu-it: Milan, IT
    - eu-uk: London, UK
    - eu-no: Oslo, NO
    - eu-ru: Moscow, RU
    - eu-se: Stockholm, SE
    
    - sa-br: Sao Paolo, BR

    - us-atl: Atlanta, GA
    - us-ash: Ashburn, VA
    - us-buf: Buffalo, NY
    - us-chi: Chicago, IL
    - us-dal: Dallas, TX
    - us-lax: Los Angeles, CA
    - us-nyc: New York, NY
    - us-sea: Seattle, WA
    - us-sjc: San Jose, CA

+ Request (application/json)

    + Body
    
            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "game": "csgo",
                "status": "enabled",
                "location": "us-atl"
            }

+ Response 200 (application/json)

    + Headers

            Location: /game/getServers

    + Body

            {
                "filter": {
                    "game": "csgo",
                    "status": "enabled",
                    "location": "us-atl"
                },
                "results": [
                    {
                        "address": "127.0.0.1:27015",
                        "location": "US, Atlanta",
                        "status": "Enabled",
                        "rcon": "admin_password",
                        "ftp": {
                            "endpoint": "127.0.0.1:21",
                            "user": "ftp_username",
                            "password": "ftp_password",
                            "path": "/127.0.0.1_27015"
                        }
                    }
                ]
            }
            
## Start Server [/game/startServer]

### startServer [POST]

Start a game server instance from a previously stopped state.

@Address (string) - Server IP Address and Port

+ Request (application/json)

    + Body

            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "address": "127.0.0.1:27015",
            }

+ Response 200 (application/json)

    + Headers

            Location: /game/startServer

    + Body

            {
                "status": "success"
            }
            
## Stop Server [/game/stopServer]

@Address (string) - Server IP Address and Port

### stopServer [POST]

Stop a game server instance.

+ Request (application/json)

    + Body

            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "address": "127.0.0.1:27015",
            }

+ Response 200 (application/json)

    + Headers

            Location: /game/startServer

    + Body

            {
                "status": "success"
            }
            
## Restart Server [/game/restartServer]

@Address (string) - Server IP Address and Port

### restartServer [POST]

Restart a game server instance.

+ Request (application/json)

    + Body

            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "address": "127.0.0.1:27015",
            }

+ Response 200 (application/json)

    + Headers

            Location: /game/restartServer

    + Body

            {
                "status": "success"
            }

## Deactivate Server [/game/deactivateServer]

@Address (string) - Server IP Address and Port

### deactivateServer [POST]

Deactivate a game server instance. For accounts on an hourly plan,
this will suspend both the service and billing until reactivated.

+ Request (application/json)

    + Body

            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "address": "127.0.0.1:27015",
            }

+ Response 200 (application/json)

    + Headers

            Location: /game/deactivateServer

    + Body

            {
                "status": "success"
            }
            
## Reactivate Server [/game/reactivateServer]

@Address (string) - Server IP Address and Port

### reactivateServer [POST]

Reactivate a game server instance. For accounts on an hourly plan,
this will renew both the service and billing for the duration of
the runtime.

+ Request (application/json)

    + Body

            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "address": "127.0.0.1:27015",
            }

+ Response 201 (application/json)

    + Headers

            Location: /game/reactivateServer

    + Body

            {
                "status": "success"
            }
            
## Delete Server [/game/deleteServer]

@Address (string) - Server IP Address and Port

### deleteServer [POST]

Delete a game server instance.

+ Request (application/json)

    + Body

            {
                "api_user": "API_USER",
                "api_key": "API_KEY",
                "address": "127.0.0.1:27015",
            }

+ Response 200 (application/json)

    + Headers

            Location: /game/deleteServer

    + Body

            {
                "status": "success"
            }